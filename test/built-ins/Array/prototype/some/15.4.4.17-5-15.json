{
  "type": "Program",
  "start": 0,
  "end": 428,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 251,
      "end": 276,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 255,
          "end": 275,
          "id": {
            "type": "Identifier",
            "start": 255,
            "end": 262,
            "name": "objDate"
          },
          "init": {
            "type": "NewExpression",
            "start": 265,
            "end": 275,
            "callee": {
              "type": "Identifier",
              "start": 269,
              "end": 273,
              "name": "Date"
            },
            "arguments": []
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "FunctionDeclaration",
      "start": 278,
      "end": 343,
      "id": {
        "type": "Identifier",
        "start": 287,
        "end": 297,
        "name": "callbackfn"
      },
      "expression": false,
      "generator": false,
      "async": false,
      "params": [
        {
          "type": "Identifier",
          "start": 298,
          "end": 301,
          "name": "val"
        },
        {
          "type": "Identifier",
          "start": 303,
          "end": 306,
          "name": "idx"
        },
        {
          "type": "Identifier",
          "start": 308,
          "end": 311,
          "name": "obj"
        }
      ],
      "body": {
        "type": "BlockStatement",
        "start": 313,
        "end": 343,
        "body": [
          {
            "type": "ReturnStatement",
            "start": 317,
            "end": 341,
            "argument": {
              "type": "BinaryExpression",
              "start": 324,
              "end": 340,
              "left": {
                "type": "ThisExpression",
                "start": 324,
                "end": 328
              },
              "operator": "===",
              "right": {
                "type": "Identifier",
                "start": 333,
                "end": 340,
                "name": "objDate"
              }
            }
          }
        ]
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 345,
      "end": 427,
      "expression": {
        "type": "CallExpression",
        "start": 345,
        "end": 426,
        "callee": {
          "type": "Identifier",
          "start": 345,
          "end": 351,
          "name": "assert"
        },
        "arguments": [
          {
            "type": "CallExpression",
            "start": 352,
            "end": 382,
            "callee": {
              "type": "MemberExpression",
              "start": 352,
              "end": 361,
              "object": {
                "type": "ArrayExpression",
                "start": 352,
                "end": 356,
                "elements": [
                  {
                    "type": "Literal",
                    "start": 353,
                    "end": 355,
                    "value": 11,
                    "raw": "11"
                  }
                ]
              },
              "property": {
                "type": "Identifier",
                "start": 357,
                "end": 361,
                "name": "some"
              },
              "computed": false,
              "optional": false
            },
            "arguments": [
              {
                "type": "Identifier",
                "start": 362,
                "end": 372,
                "name": "callbackfn"
              },
              {
                "type": "Identifier",
                "start": 374,
                "end": 381,
                "name": "objDate"
              }
            ],
            "optional": false
          },
          {
            "type": "Literal",
            "start": 384,
            "end": 425,
            "value": "[11].some(callbackfn, objDate) !== true",
            "raw": "'[11].some(callbackfn, objDate) !== true'"
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script"
}