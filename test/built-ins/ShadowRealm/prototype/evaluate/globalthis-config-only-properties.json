{
  "type": "Program",
  "start": 0,
  "end": 2868,
  "body": [
    {
      "type": "ExpressionStatement",
      "start": 1107,
      "end": 1258,
      "expression": {
        "type": "CallExpression",
        "start": 1107,
        "end": 1257,
        "callee": {
          "type": "MemberExpression",
          "start": 1107,
          "end": 1123,
          "object": {
            "type": "Identifier",
            "start": 1107,
            "end": 1113,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1114,
            "end": 1123,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "UnaryExpression",
            "start": 1127,
            "end": 1164,
            "operator": "typeof",
            "prefix": true,
            "argument": {
              "type": "MemberExpression",
              "start": 1134,
              "end": 1164,
              "object": {
                "type": "MemberExpression",
                "start": 1134,
                "end": 1155,
                "object": {
                  "type": "Identifier",
                  "start": 1134,
                  "end": 1145,
                  "name": "ShadowRealm"
                },
                "property": {
                  "type": "Identifier",
                  "start": 1146,
                  "end": 1155,
                  "name": "prototype"
                },
                "computed": false,
                "optional": false
              },
              "property": {
                "type": "Identifier",
                "start": 1156,
                "end": 1164,
                "name": "evaluate"
              },
              "computed": false,
              "optional": false
            }
          },
          {
            "type": "Literal",
            "start": 1168,
            "end": 1178,
            "value": "function",
            "raw": "'function'"
          },
          {
            "type": "Literal",
            "start": 1182,
            "end": 1255,
            "value": "This test must fail if ShadowRealm.prototype.evaluate is not a function",
            "raw": "'This test must fail if ShadowRealm.prototype.evaluate is not a function'"
          }
        ],
        "optional": false
      }
    },
    {
      "type": "VariableDeclaration",
      "start": 1260,
      "end": 1288,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 1266,
          "end": 1287,
          "id": {
            "type": "Identifier",
            "start": 1266,
            "end": 1267,
            "name": "r"
          },
          "init": {
            "type": "NewExpression",
            "start": 1270,
            "end": 1287,
            "callee": {
              "type": "Identifier",
              "start": 1274,
              "end": 1285,
              "name": "ShadowRealm"
            },
            "arguments": []
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "VariableDeclaration",
      "start": 1290,
      "end": 1790,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 1296,
          "end": 1789,
          "id": {
            "type": "Identifier",
            "start": 1296,
            "end": 1305,
            "name": "anyMissed"
          },
          "init": {
            "type": "CallExpression",
            "start": 1308,
            "end": 1789,
            "callee": {
              "type": "MemberExpression",
              "start": 1308,
              "end": 1318,
              "object": {
                "type": "Identifier",
                "start": 1308,
                "end": 1309,
                "name": "r"
              },
              "property": {
                "type": "Identifier",
                "start": 1310,
                "end": 1318,
                "name": "evaluate"
              },
              "computed": false,
              "optional": false
            },
            "arguments": [
              {
                "type": "TemplateLiteral",
                "start": 1319,
                "end": 1788,
                "expressions": [],
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "start": 1320,
                    "end": 1787,
                    "value": {
                      "raw": "\n  // These names are the only exception as non configurable values.\n  // Yet, they don't represent any object value.\n  const esNonConfigValues = [\n    'undefined',\n    'Infinity',\n    'NaN'\n  ];\n\n  const entries = Object.entries(Object.getOwnPropertyDescriptors(globalThis));\n\n  const missed = entries\n    .filter(entry => entry[1].configurable === false)\n    .map(([name]) => name)\n    .filter(name => !esNonConfigValues.includes(name))\n    .join(', ');\n\n  missed;\n",
                      "cooked": "\n  // These names are the only exception as non configurable values.\n  // Yet, they don't represent any object value.\n  const esNonConfigValues = [\n    'undefined',\n    'Infinity',\n    'NaN'\n  ];\n\n  const entries = Object.entries(Object.getOwnPropertyDescriptors(globalThis));\n\n  const missed = entries\n    .filter(entry => entry[1].configurable === false)\n    .map(([name]) => name)\n    .filter(name => !esNonConfigValues.includes(name))\n    .join(', ');\n\n  missed;\n"
                    },
                    "tail": true
                  }
                ]
              }
            ],
            "optional": false
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "ExpressionStatement",
      "start": 1792,
      "end": 1874,
      "expression": {
        "type": "CallExpression",
        "start": 1792,
        "end": 1873,
        "callee": {
          "type": "MemberExpression",
          "start": 1792,
          "end": 1808,
          "object": {
            "type": "Identifier",
            "start": 1792,
            "end": 1798,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1799,
            "end": 1808,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1809,
            "end": 1818,
            "name": "anyMissed"
          },
          {
            "type": "Literal",
            "start": 1820,
            "end": 1822,
            "value": "",
            "raw": "''"
          },
          {
            "type": "Literal",
            "start": 1824,
            "end": 1872,
            "value": "All globalThis properties must be configurable",
            "raw": "'All globalThis properties must be configurable'"
          }
        ],
        "optional": false
      }
    },
    {
      "type": "VariableDeclaration",
      "start": 1876,
      "end": 2782,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 1882,
          "end": 2781,
          "id": {
            "type": "Identifier",
            "start": 1882,
            "end": 1888,
            "name": "result"
          },
          "init": {
            "type": "CallExpression",
            "start": 1891,
            "end": 2781,
            "callee": {
              "type": "MemberExpression",
              "start": 1891,
              "end": 1901,
              "object": {
                "type": "Identifier",
                "start": 1891,
                "end": 1892,
                "name": "r"
              },
              "property": {
                "type": "Identifier",
                "start": 1893,
                "end": 1901,
                "name": "evaluate"
              },
              "computed": false,
              "optional": false
            },
            "arguments": [
              {
                "type": "TemplateLiteral",
                "start": 1902,
                "end": 2780,
                "expressions": [],
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "start": 1903,
                    "end": 2779,
                    "value": {
                      "raw": "\n  const ObjectKeys = Object.keys;\n  const hasOwn = Object.prototype.hasOwnProperty;\n  const savedGlobal = globalThis;\n  const names = Object.keys(Object.getOwnPropertyDescriptors(globalThis));\n\n  // These names are the only exception as non configurable values.\n  // Yet, they don't represent any object value.\n  const esNonConfigValues = [\n    'undefined',\n    'Infinity',\n    'NaN'\n  ];\n\n  // Delete every name except globalThis, for now\n  const remainingNames = names.filter(name => {\n    if (esNonConfigValues.includes(name)) {\n      return false;\n    }\n\n    if (name !== 'globalThis') {\n      delete globalThis[name];\n      return hasOwn.call(globalThis, name);\n    }\n  });\n\n  delete globalThis['globalThis'];\n\n  if (hasOwn.call(savedGlobal, 'globalThis')) {\n    remainingNames.push('globalThis');\n  }\n\n  const failedDelete = remainingNames.join(', ');\n\n  failedDelete;\n",
                      "cooked": "\n  const ObjectKeys = Object.keys;\n  const hasOwn = Object.prototype.hasOwnProperty;\n  const savedGlobal = globalThis;\n  const names = Object.keys(Object.getOwnPropertyDescriptors(globalThis));\n\n  // These names are the only exception as non configurable values.\n  // Yet, they don't represent any object value.\n  const esNonConfigValues = [\n    'undefined',\n    'Infinity',\n    'NaN'\n  ];\n\n  // Delete every name except globalThis, for now\n  const remainingNames = names.filter(name => {\n    if (esNonConfigValues.includes(name)) {\n      return false;\n    }\n\n    if (name !== 'globalThis') {\n      delete globalThis[name];\n      return hasOwn.call(globalThis, name);\n    }\n  });\n\n  delete globalThis['globalThis'];\n\n  if (hasOwn.call(savedGlobal, 'globalThis')) {\n    remainingNames.push('globalThis');\n  }\n\n  const failedDelete = remainingNames.join(', ');\n\n  failedDelete;\n"
                    },
                    "tail": true
                  }
                ]
              }
            ],
            "optional": false
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "ExpressionStatement",
      "start": 2784,
      "end": 2867,
      "expression": {
        "type": "CallExpression",
        "start": 2784,
        "end": 2866,
        "callee": {
          "type": "MemberExpression",
          "start": 2784,
          "end": 2800,
          "object": {
            "type": "Identifier",
            "start": 2784,
            "end": 2790,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 2791,
            "end": 2800,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 2801,
            "end": 2807,
            "name": "result"
          },
          {
            "type": "Literal",
            "start": 2809,
            "end": 2811,
            "value": "",
            "raw": "''"
          },
          {
            "type": "Literal",
            "start": 2813,
            "end": 2865,
            "value": "deleting any globalThis property must be effective",
            "raw": "'deleting any globalThis property must be effective'"
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script"
}