{
  "type": "Program",
  "start": 0,
  "end": 1197,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 762,
      "end": 812,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 768,
          "end": 811,
          "id": {
            "type": "Identifier",
            "start": 768,
            "end": 776,
            "name": "calendar"
          },
          "init": {
            "type": "NewExpression",
            "start": 779,
            "end": 811,
            "callee": {
              "type": "MemberExpression",
              "start": 783,
              "end": 800,
              "object": {
                "type": "Identifier",
                "start": 783,
                "end": 791,
                "name": "Temporal"
              },
              "property": {
                "type": "Identifier",
                "start": 792,
                "end": 800,
                "name": "Calendar"
              },
              "computed": false,
              "optional": false
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 801,
                "end": 810,
                "value": "iso8601"
              }
            ]
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "VariableDeclaration",
      "start": 813,
      "end": 871,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 819,
          "end": 870,
          "id": {
            "type": "Identifier",
            "start": 819,
            "end": 823,
            "name": "date"
          },
          "init": {
            "type": "NewExpression",
            "start": 826,
            "end": 870,
            "callee": {
              "type": "MemberExpression",
              "start": 830,
              "end": 848,
              "object": {
                "type": "Identifier",
                "start": 830,
                "end": 838,
                "name": "Temporal"
              },
              "property": {
                "type": "Identifier",
                "start": 839,
                "end": 848,
                "name": "PlainDate"
              },
              "computed": false,
              "optional": false
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 849,
                "end": 853,
                "value": 2000
              },
              {
                "type": "Literal",
                "start": 855,
                "end": 856,
                "value": 5
              },
              {
                "type": "Literal",
                "start": 858,
                "end": 859,
                "value": 2
              },
              {
                "type": "Identifier",
                "start": 861,
                "end": 869,
                "name": "calendar"
              }
            ]
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "VariableDeclaration",
      "start": 872,
      "end": 923,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 878,
          "end": 922,
          "id": {
            "type": "Identifier",
            "start": 878,
            "end": 886,
            "name": "duration"
          },
          "init": {
            "type": "NewExpression",
            "start": 889,
            "end": 922,
            "callee": {
              "type": "MemberExpression",
              "start": 893,
              "end": 910,
              "object": {
                "type": "Identifier",
                "start": 893,
                "end": 901,
                "name": "Temporal"
              },
              "property": {
                "type": "Identifier",
                "start": 902,
                "end": 910,
                "name": "Duration"
              },
              "computed": false,
              "optional": false
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 911,
                "end": 912,
                "value": 3
              },
              {
                "type": "Literal",
                "start": 914,
                "end": 915,
                "value": 3
              },
              {
                "type": "Literal",
                "start": 917,
                "end": 918,
                "value": 0
              },
              {
                "type": "Literal",
                "start": 920,
                "end": 921,
                "value": 3
              }
            ]
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "VariableDeclaration",
      "start": 924,
      "end": 1020,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 930,
          "end": 1019,
          "id": {
            "type": "Identifier",
            "start": 930,
            "end": 942,
            "name": "badOverflows"
          },
          "init": {
            "type": "ArrayExpression",
            "start": 945,
            "end": 1019,
            "elements": [
              {
                "type": "Literal",
                "start": 946,
                "end": 948,
                "value": ""
              },
              {
                "type": "Literal",
                "start": 950,
                "end": 961,
                "value": "CONSTRAIN"
              },
              {
                "type": "Literal",
                "start": 963,
                "end": 972,
                "value": "balance"
              },
              {
                "type": "Literal",
                "start": 974,
                "end": 988,
                "value": "other string"
              },
              {
                "type": "Literal",
                "start": 990,
                "end": 1006,
                "value": "constraÄ±n"
              },
              {
                "type": "Literal",
                "start": 1008,
                "end": 1018,
                "value": "reject\u0000"
              }
            ]
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "ForOfStatement",
      "start": 1021,
      "end": 1196,
      "await": false,
      "left": {
        "type": "VariableDeclaration",
        "start": 1026,
        "end": 1040,
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 1032,
            "end": 1040,
            "id": {
              "type": "Identifier",
              "start": 1032,
              "end": 1040,
              "name": "overflow"
            },
            "init": null
          }
        ],
        "kind": "const"
      },
      "right": {
        "type": "Identifier",
        "start": 1044,
        "end": 1056,
        "name": "badOverflows"
      },
      "body": {
        "type": "BlockStatement",
        "start": 1058,
        "end": 1196,
        "body": [
          {
            "type": "ExpressionStatement",
            "start": 1062,
            "end": 1194,
            "expression": {
              "type": "CallExpression",
              "start": 1062,
              "end": 1193,
              "callee": {
                "type": "MemberExpression",
                "start": 1062,
                "end": 1075,
                "object": {
                  "type": "Identifier",
                  "start": 1062,
                  "end": 1068,
                  "name": "assert"
                },
                "property": {
                  "type": "Identifier",
                  "start": 1069,
                  "end": 1075,
                  "name": "throws"
                },
                "computed": false,
                "optional": false
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "start": 1081,
                  "end": 1091,
                  "name": "RangeError"
                },
                {
                  "type": "ArrowFunctionExpression",
                  "start": 1097,
                  "end": 1149,
                  "id": null,
                  "expression": true,
                  "generator": false,
                  "async": false,
                  "params": [],
                  "body": {
                    "type": "CallExpression",
                    "start": 1103,
                    "end": 1149,
                    "callee": {
                      "type": "MemberExpression",
                      "start": 1103,
                      "end": 1119,
                      "object": {
                        "type": "Identifier",
                        "start": 1103,
                        "end": 1111,
                        "name": "calendar"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 1112,
                        "end": 1119,
                        "name": "dateAdd"
                      },
                      "computed": false,
                      "optional": false
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "start": 1120,
                        "end": 1124,
                        "name": "date"
                      },
                      {
                        "type": "Identifier",
                        "start": 1126,
                        "end": 1134,
                        "name": "duration"
                      },
                      {
                        "type": "ObjectExpression",
                        "start": 1136,
                        "end": 1148,
                        "properties": [
                          {
                            "type": "Property",
                            "start": 1138,
                            "end": 1146,
                            "method": false,
                            "shorthand": true,
                            "computed": false,
                            "key": {
                              "type": "Identifier",
                              "start": 1138,
                              "end": 1146,
                              "name": "overflow"
                            },
                            "kind": "init",
                            "value": {
                              "type": "Identifier",
                              "start": 1138,
                              "end": 1146,
                              "name": "overflow"
                            }
                          }
                        ]
                      }
                    ],
                    "optional": false
                  }
                },
                {
                  "type": "TemplateLiteral",
                  "start": 1155,
                  "end": 1189,
                  "expressions": [
                    {
                      "type": "Identifier",
                      "start": 1177,
                      "end": 1185,
                      "name": "overflow"
                    }
                  ],
                  "quasis": [
                    {
                      "type": "TemplateElement",
                      "start": 1156,
                      "end": 1175,
                      "value": {
                        "raw": "invalid overflow (\"",
                        "cooked": "invalid overflow (\""
                      },
                      "tail": false
                    },
                    {
                      "type": "TemplateElement",
                      "start": 1186,
                      "end": 1188,
                      "value": {
                        "raw": "\")",
                        "cooked": "\")"
                      },
                      "tail": true
                    }
                  ]
                }
              ],
              "optional": false
            }
          }
        ]
      }
    }
  ],
  "sourceType": "script"
}