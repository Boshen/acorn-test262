{
  "type": "Program",
  "start": 0,
  "end": 1193,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 758,
      "end": 808,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 764,
          "end": 807,
          "id": {
            "type": "Identifier",
            "start": 764,
            "end": 772,
            "name": "calendar"
          },
          "init": {
            "type": "NewExpression",
            "start": 775,
            "end": 807,
            "callee": {
              "type": "MemberExpression",
              "start": 779,
              "end": 796,
              "object": {
                "type": "Identifier",
                "start": 779,
                "end": 787,
                "name": "Temporal"
              },
              "property": {
                "type": "Identifier",
                "start": 788,
                "end": 796,
                "name": "Calendar"
              },
              "computed": false,
              "optional": false
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 797,
                "end": 806,
                "value": "iso8601"
              }
            ]
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "VariableDeclaration",
      "start": 809,
      "end": 867,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 815,
          "end": 866,
          "id": {
            "type": "Identifier",
            "start": 815,
            "end": 819,
            "name": "date"
          },
          "init": {
            "type": "NewExpression",
            "start": 822,
            "end": 866,
            "callee": {
              "type": "MemberExpression",
              "start": 826,
              "end": 844,
              "object": {
                "type": "Identifier",
                "start": 826,
                "end": 834,
                "name": "Temporal"
              },
              "property": {
                "type": "Identifier",
                "start": 835,
                "end": 844,
                "name": "PlainDate"
              },
              "computed": false,
              "optional": false
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 845,
                "end": 849,
                "value": 2000
              },
              {
                "type": "Literal",
                "start": 851,
                "end": 852,
                "value": 5
              },
              {
                "type": "Literal",
                "start": 854,
                "end": 855,
                "value": 2
              },
              {
                "type": "Identifier",
                "start": 857,
                "end": 865,
                "name": "calendar"
              }
            ]
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "VariableDeclaration",
      "start": 868,
      "end": 919,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 874,
          "end": 918,
          "id": {
            "type": "Identifier",
            "start": 874,
            "end": 882,
            "name": "duration"
          },
          "init": {
            "type": "NewExpression",
            "start": 885,
            "end": 918,
            "callee": {
              "type": "MemberExpression",
              "start": 889,
              "end": 906,
              "object": {
                "type": "Identifier",
                "start": 889,
                "end": 897,
                "name": "Temporal"
              },
              "property": {
                "type": "Identifier",
                "start": 898,
                "end": 906,
                "name": "Duration"
              },
              "computed": false,
              "optional": false
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 907,
                "end": 908,
                "value": 3
              },
              {
                "type": "Literal",
                "start": 910,
                "end": 911,
                "value": 3
              },
              {
                "type": "Literal",
                "start": 913,
                "end": 914,
                "value": 0
              },
              {
                "type": "Literal",
                "start": 916,
                "end": 917,
                "value": 3
              }
            ]
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "VariableDeclaration",
      "start": 920,
      "end": 1016,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 926,
          "end": 1015,
          "id": {
            "type": "Identifier",
            "start": 926,
            "end": 938,
            "name": "badOverflows"
          },
          "init": {
            "type": "ArrayExpression",
            "start": 941,
            "end": 1015,
            "elements": [
              {
                "type": "Literal",
                "start": 942,
                "end": 944,
                "value": ""
              },
              {
                "type": "Literal",
                "start": 946,
                "end": 957,
                "value": "CONSTRAIN"
              },
              {
                "type": "Literal",
                "start": 959,
                "end": 968,
                "value": "balance"
              },
              {
                "type": "Literal",
                "start": 970,
                "end": 984,
                "value": "other string"
              },
              {
                "type": "Literal",
                "start": 986,
                "end": 1002,
                "value": "constraÄ±n"
              },
              {
                "type": "Literal",
                "start": 1004,
                "end": 1014,
                "value": "reject\u0000"
              }
            ]
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "ForOfStatement",
      "start": 1017,
      "end": 1192,
      "await": false,
      "left": {
        "type": "VariableDeclaration",
        "start": 1022,
        "end": 1036,
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 1028,
            "end": 1036,
            "id": {
              "type": "Identifier",
              "start": 1028,
              "end": 1036,
              "name": "overflow"
            },
            "init": null
          }
        ],
        "kind": "const"
      },
      "right": {
        "type": "Identifier",
        "start": 1040,
        "end": 1052,
        "name": "badOverflows"
      },
      "body": {
        "type": "BlockStatement",
        "start": 1054,
        "end": 1192,
        "body": [
          {
            "type": "ExpressionStatement",
            "start": 1058,
            "end": 1190,
            "expression": {
              "type": "CallExpression",
              "start": 1058,
              "end": 1189,
              "callee": {
                "type": "MemberExpression",
                "start": 1058,
                "end": 1071,
                "object": {
                  "type": "Identifier",
                  "start": 1058,
                  "end": 1064,
                  "name": "assert"
                },
                "property": {
                  "type": "Identifier",
                  "start": 1065,
                  "end": 1071,
                  "name": "throws"
                },
                "computed": false,
                "optional": false
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "start": 1077,
                  "end": 1087,
                  "name": "RangeError"
                },
                {
                  "type": "ArrowFunctionExpression",
                  "start": 1093,
                  "end": 1145,
                  "id": null,
                  "expression": true,
                  "generator": false,
                  "async": false,
                  "params": [],
                  "body": {
                    "type": "CallExpression",
                    "start": 1099,
                    "end": 1145,
                    "callee": {
                      "type": "MemberExpression",
                      "start": 1099,
                      "end": 1115,
                      "object": {
                        "type": "Identifier",
                        "start": 1099,
                        "end": 1107,
                        "name": "calendar"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 1108,
                        "end": 1115,
                        "name": "dateAdd"
                      },
                      "computed": false,
                      "optional": false
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "start": 1116,
                        "end": 1120,
                        "name": "date"
                      },
                      {
                        "type": "Identifier",
                        "start": 1122,
                        "end": 1130,
                        "name": "duration"
                      },
                      {
                        "type": "ObjectExpression",
                        "start": 1132,
                        "end": 1144,
                        "properties": [
                          {
                            "type": "Property",
                            "start": 1134,
                            "end": 1142,
                            "method": false,
                            "shorthand": true,
                            "computed": false,
                            "key": {
                              "type": "Identifier",
                              "start": 1134,
                              "end": 1142,
                              "name": "overflow"
                            },
                            "kind": "init",
                            "value": {
                              "type": "Identifier",
                              "start": 1134,
                              "end": 1142,
                              "name": "overflow"
                            }
                          }
                        ]
                      }
                    ],
                    "optional": false
                  }
                },
                {
                  "type": "TemplateLiteral",
                  "start": 1151,
                  "end": 1185,
                  "expressions": [
                    {
                      "type": "Identifier",
                      "start": 1173,
                      "end": 1181,
                      "name": "overflow"
                    }
                  ],
                  "quasis": [
                    {
                      "type": "TemplateElement",
                      "start": 1152,
                      "end": 1171,
                      "value": {
                        "raw": "invalid overflow (\"",
                        "cooked": "invalid overflow (\""
                      },
                      "tail": false
                    },
                    {
                      "type": "TemplateElement",
                      "start": 1182,
                      "end": 1184,
                      "value": {
                        "raw": "\")",
                        "cooked": "\")"
                      },
                      "tail": true
                    }
                  ]
                }
              ],
              "optional": false
            }
          }
        ]
      }
    }
  ],
  "sourceType": "script"
}