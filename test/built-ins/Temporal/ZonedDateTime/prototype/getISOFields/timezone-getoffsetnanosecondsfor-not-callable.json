{
  "type": "Program",
  "start": 0,
  "end": 804,
  "body": [
    {
      "type": "ExpressionStatement",
      "start": 332,
      "end": 803,
      "expression": {
        "type": "CallExpression",
        "start": 332,
        "end": 802,
        "callee": {
          "type": "MemberExpression",
          "start": 332,
          "end": 406,
          "object": {
            "type": "ArrayExpression",
            "start": 332,
            "end": 398,
            "elements": [
              {
                "type": "Identifier",
                "start": 333,
                "end": 342,
                "name": "undefined"
              },
              {
                "type": "Literal",
                "start": 344,
                "end": 348,
                "value": null
              },
              {
                "type": "Literal",
                "start": 350,
                "end": 354,
                "value": true
              },
              {
                "type": "MemberExpression",
                "start": 356,
                "end": 363,
                "object": {
                  "type": "Identifier",
                  "start": 356,
                  "end": 360,
                  "name": "Math"
                },
                "property": {
                  "type": "Identifier",
                  "start": 361,
                  "end": 363,
                  "name": "PI"
                },
                "computed": false,
                "optional": false
              },
              {
                "type": "Literal",
                "start": 365,
                "end": 373,
                "value": "string"
              },
              {
                "type": "CallExpression",
                "start": 375,
                "end": 388,
                "callee": {
                  "type": "Identifier",
                  "start": 375,
                  "end": 381,
                  "name": "Symbol"
                },
                "arguments": [
                  {
                    "type": "Literal",
                    "start": 382,
                    "end": 387,
                    "value": "sym"
                  }
                ],
                "optional": false
              },
              {
                "type": "Literal",
                "start": 390,
                "end": 393,
                "value": "42n",
                "bigint": "42"
              },
              {
                "type": "ObjectExpression",
                "start": 395,
                "end": 397,
                "properties": []
              }
            ]
          },
          "property": {
            "type": "Identifier",
            "start": 399,
            "end": 406,
            "name": "forEach"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "ArrowFunctionExpression",
            "start": 407,
            "end": 801,
            "id": null,
            "expression": false,
            "generator": false,
            "async": false,
            "params": [
              {
                "type": "Identifier",
                "start": 408,
                "end": 419,
                "name": "notCallable"
              }
            ],
            "body": {
              "type": "BlockStatement",
              "start": 424,
              "end": 801,
              "body": [
                {
                  "type": "VariableDeclaration",
                  "start": 428,
                  "end": 474,
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "start": 434,
                      "end": 473,
                      "id": {
                        "type": "Identifier",
                        "start": 434,
                        "end": 442,
                        "name": "timeZone"
                      },
                      "init": {
                        "type": "NewExpression",
                        "start": 445,
                        "end": 473,
                        "callee": {
                          "type": "MemberExpression",
                          "start": 449,
                          "end": 466,
                          "object": {
                            "type": "Identifier",
                            "start": 449,
                            "end": 457,
                            "name": "Temporal"
                          },
                          "property": {
                            "type": "Identifier",
                            "start": 458,
                            "end": 466,
                            "name": "TimeZone"
                          },
                          "computed": false,
                          "optional": false
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 467,
                            "end": 472,
                            "value": "UTC"
                          }
                        ]
                      }
                    }
                  ],
                  "kind": "const"
                },
                {
                  "type": "VariableDeclaration",
                  "start": 477,
                  "end": 559,
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "start": 483,
                      "end": 558,
                      "id": {
                        "type": "Identifier",
                        "start": 483,
                        "end": 491,
                        "name": "datetime"
                      },
                      "init": {
                        "type": "NewExpression",
                        "start": 494,
                        "end": 558,
                        "callee": {
                          "type": "MemberExpression",
                          "start": 498,
                          "end": 520,
                          "object": {
                            "type": "Identifier",
                            "start": 498,
                            "end": 506,
                            "name": "Temporal"
                          },
                          "property": {
                            "type": "Identifier",
                            "start": 507,
                            "end": 520,
                            "name": "ZonedDateTime"
                          },
                          "computed": false,
                          "optional": false
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 521,
                            "end": 547,
                            "value": "1000000000987654321n",
                            "bigint": "1000000000987654321"
                          },
                          {
                            "type": "Identifier",
                            "start": 549,
                            "end": 557,
                            "name": "timeZone"
                          }
                        ]
                      }
                    }
                  ],
                  "kind": "const"
                },
                {
                  "type": "ExpressionStatement",
                  "start": 562,
                  "end": 609,
                  "expression": {
                    "type": "AssignmentExpression",
                    "start": 562,
                    "end": 608,
                    "operator": "=",
                    "left": {
                      "type": "MemberExpression",
                      "start": 562,
                      "end": 594,
                      "object": {
                        "type": "Identifier",
                        "start": 562,
                        "end": 570,
                        "name": "timeZone"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 571,
                        "end": 594,
                        "name": "getOffsetNanosecondsFor"
                      },
                      "computed": false,
                      "optional": false
                    },
                    "right": {
                      "type": "Identifier",
                      "start": 597,
                      "end": 608,
                      "name": "notCallable"
                    }
                  }
                },
                {
                  "type": "ExpressionStatement",
                  "start": 612,
                  "end": 799,
                  "expression": {
                    "type": "CallExpression",
                    "start": 612,
                    "end": 798,
                    "callee": {
                      "type": "MemberExpression",
                      "start": 612,
                      "end": 625,
                      "object": {
                        "type": "Identifier",
                        "start": 612,
                        "end": 618,
                        "name": "assert"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 619,
                        "end": 625,
                        "name": "throws"
                      },
                      "computed": false,
                      "optional": false
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "start": 631,
                        "end": 640,
                        "name": "TypeError"
                      },
                      {
                        "type": "ArrowFunctionExpression",
                        "start": 646,
                        "end": 675,
                        "id": null,
                        "expression": true,
                        "generator": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "CallExpression",
                          "start": 652,
                          "end": 675,
                          "callee": {
                            "type": "MemberExpression",
                            "start": 652,
                            "end": 673,
                            "object": {
                              "type": "Identifier",
                              "start": 652,
                              "end": 660,
                              "name": "datetime"
                            },
                            "property": {
                              "type": "Identifier",
                              "start": 661,
                              "end": 673,
                              "name": "getISOFields"
                            },
                            "computed": false,
                            "optional": false
                          },
                          "arguments": [],
                          "optional": false
                        }
                      },
                      {
                        "type": "TemplateLiteral",
                        "start": 681,
                        "end": 794,
                        "expressions": [
                          {
                            "type": "ConditionalExpression",
                            "start": 695,
                            "end": 745,
                            "test": {
                              "type": "BinaryExpression",
                              "start": 695,
                              "end": 715,
                              "left": {
                                "type": "Identifier",
                                "start": 695,
                                "end": 706,
                                "name": "notCallable"
                              },
                              "operator": "===",
                              "right": {
                                "type": "Literal",
                                "start": 711,
                                "end": 715,
                                "value": null
                              }
                            },
                            "consequent": {
                              "type": "Literal",
                              "start": 718,
                              "end": 724,
                              "value": "null"
                            },
                            "alternate": {
                              "type": "UnaryExpression",
                              "start": 727,
                              "end": 745,
                              "operator": "typeof",
                              "prefix": true,
                              "argument": {
                                "type": "Identifier",
                                "start": 734,
                                "end": 745,
                                "name": "notCallable"
                              }
                            }
                          }
                        ],
                        "quasis": [
                          {
                            "type": "TemplateElement",
                            "start": 682,
                            "end": 693,
                            "value": {
                              "raw": "Uncallable ",
                              "cooked": "Uncallable "
                            },
                            "tail": false
                          },
                          {
                            "type": "TemplateElement",
                            "start": 746,
                            "end": 793,
                            "value": {
                              "raw": " getOffsetNanosecondsFor should throw TypeError",
                              "cooked": " getOffsetNanosecondsFor should throw TypeError"
                            },
                            "tail": true
                          }
                        ]
                      }
                    ],
                    "optional": false
                  }
                }
              ]
            }
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script"
}