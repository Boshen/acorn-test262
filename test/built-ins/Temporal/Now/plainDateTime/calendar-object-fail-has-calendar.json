{
  "type": "Program",
  "start": 0,
  "end": 603,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 296,
      "end": 444,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 300,
          "end": 443,
          "id": {
            "type": "Identifier",
            "start": 300,
            "end": 308,
            "name": "calendar"
          },
          "init": {
            "type": "NewExpression",
            "start": 311,
            "end": 443,
            "callee": {
              "type": "Identifier",
              "start": 315,
              "end": 320,
              "name": "Proxy"
            },
            "arguments": [
              {
                "type": "ObjectExpression",
                "start": 321,
                "end": 323,
                "properties": []
              },
              {
                "type": "ObjectExpression",
                "start": 325,
                "end": 442,
                "properties": [
                  {
                    "type": "Property",
                    "start": 329,
                    "end": 439,
                    "method": false,
                    "shorthand": false,
                    "computed": false,
                    "key": {
                      "type": "Identifier",
                      "start": 329,
                      "end": 332,
                      "name": "has"
                    },
                    "value": {
                      "type": "FunctionExpression",
                      "start": 334,
                      "end": 439,
                      "id": null,
                      "expression": false,
                      "generator": false,
                      "async": false,
                      "params": [
                        {
                          "type": "Identifier",
                          "start": 343,
                          "end": 349,
                          "name": "target"
                        },
                        {
                          "type": "Identifier",
                          "start": 351,
                          "end": 359,
                          "name": "property"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "start": 361,
                        "end": 439,
                        "body": [
                          {
                            "type": "IfStatement",
                            "start": 367,
                            "end": 435,
                            "test": {
                              "type": "BinaryExpression",
                              "start": 371,
                              "end": 394,
                              "left": {
                                "type": "Identifier",
                                "start": 371,
                                "end": 379,
                                "name": "property"
                              },
                              "operator": "===",
                              "right": {
                                "type": "Literal",
                                "start": 384,
                                "end": 394,
                                "value": "calendar"
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "start": 396,
                              "end": 435,
                              "body": [
                                {
                                  "type": "ThrowStatement",
                                  "start": 404,
                                  "end": 429,
                                  "argument": {
                                    "type": "NewExpression",
                                    "start": 410,
                                    "end": 428,
                                    "callee": {
                                      "type": "Identifier",
                                      "start": 414,
                                      "end": 426,
                                      "name": "Test262Error"
                                    },
                                    "arguments": []
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          }
                        ]
                      }
                    },
                    "kind": "init"
                  }
                ]
              }
            ]
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "ExpressionStatement",
      "start": 446,
      "end": 602,
      "expression": {
        "type": "CallExpression",
        "start": 446,
        "end": 601,
        "callee": {
          "type": "MemberExpression",
          "start": 446,
          "end": 459,
          "object": {
            "type": "Identifier",
            "start": 446,
            "end": 452,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 453,
            "end": 459,
            "name": "throws"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 460,
            "end": 472,
            "name": "Test262Error"
          },
          {
            "type": "FunctionExpression",
            "start": 474,
            "end": 528,
            "id": null,
            "expression": false,
            "generator": false,
            "async": false,
            "params": [],
            "body": {
              "type": "BlockStatement",
              "start": 485,
              "end": 528,
              "body": [
                {
                  "type": "ExpressionStatement",
                  "start": 489,
                  "end": 526,
                  "expression": {
                    "type": "CallExpression",
                    "start": 489,
                    "end": 525,
                    "callee": {
                      "type": "MemberExpression",
                      "start": 489,
                      "end": 515,
                      "object": {
                        "type": "MemberExpression",
                        "start": 489,
                        "end": 501,
                        "object": {
                          "type": "Identifier",
                          "start": 489,
                          "end": 497,
                          "name": "Temporal"
                        },
                        "property": {
                          "type": "Identifier",
                          "start": 498,
                          "end": 501,
                          "name": "Now"
                        },
                        "computed": false,
                        "optional": false
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 502,
                        "end": 515,
                        "name": "plainDateTime"
                      },
                      "computed": false,
                      "optional": false
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "start": 516,
                        "end": 524,
                        "name": "calendar"
                      }
                    ],
                    "optional": false
                  }
                }
              ]
            }
          },
          {
            "type": "Literal",
            "start": 530,
            "end": 600,
            "value": "Temporal.Now.plainDateTime(calendar) throws a Test262Error exception"
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script"
}