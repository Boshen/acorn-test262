{
  "type": "Program",
  "start": 0,
  "end": 804,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 467,
      "end": 598,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 473,
          "end": 597,
          "id": {
            "type": "Identifier",
            "start": 473,
            "end": 487,
            "name": "invalidOptions"
          },
          "init": {
            "type": "ArrayExpression",
            "start": 490,
            "end": 597,
            "elements": [
              {
                "type": "Literal",
                "start": 494,
                "end": 498,
                "value": null
              },
              {
                "type": "Literal",
                "start": 502,
                "end": 503,
                "value": 1
              },
              {
                "type": "Literal",
                "start": 507,
                "end": 509,
                "value": ""
              },
              {
                "type": "Literal",
                "start": 513,
                "end": 521,
                "value": "Lookup"
              },
              {
                "type": "Literal",
                "start": 525,
                "end": 533,
                "value": "LOOKUP"
              },
              {
                "type": "Literal",
                "start": 537,
                "end": 547,
                "value": "lookup\u0000"
              },
              {
                "type": "Literal",
                "start": 551,
                "end": 561,
                "value": "Best fit"
              },
              {
                "type": "Literal",
                "start": 565,
                "end": 575,
                "value": "BEST FIT"
              },
              {
                "type": "Literal",
                "start": 579,
                "end": 594,
                "value": "bestÂ fit"
              }
            ]
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "ForOfStatement",
      "start": 600,
      "end": 803,
      "await": false,
      "left": {
        "type": "VariableDeclaration",
        "start": 605,
        "end": 624,
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 611,
            "end": 624,
            "id": {
              "type": "Identifier",
              "start": 611,
              "end": 624,
              "name": "localeMatcher"
            },
            "init": null
          }
        ],
        "kind": "const"
      },
      "right": {
        "type": "Identifier",
        "start": 628,
        "end": 642,
        "name": "invalidOptions"
      },
      "body": {
        "type": "BlockStatement",
        "start": 644,
        "end": 803,
        "body": [
          {
            "type": "ExpressionStatement",
            "start": 648,
            "end": 801,
            "expression": {
              "type": "CallExpression",
              "start": 648,
              "end": 800,
              "callee": {
                "type": "MemberExpression",
                "start": 648,
                "end": 661,
                "object": {
                  "type": "Identifier",
                  "start": 648,
                  "end": 654,
                  "name": "assert"
                },
                "property": {
                  "type": "Identifier",
                  "start": 655,
                  "end": 661,
                  "name": "throws"
                },
                "computed": false,
                "optional": false
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "start": 662,
                  "end": 672,
                  "name": "RangeError"
                },
                {
                  "type": "FunctionExpression",
                  "start": 674,
                  "end": 738,
                  "id": null,
                  "expression": false,
                  "generator": false,
                  "async": false,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "start": 685,
                    "end": 738,
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "start": 691,
                        "end": 734,
                        "expression": {
                          "type": "NewExpression",
                          "start": 691,
                          "end": 733,
                          "callee": {
                            "type": "MemberExpression",
                            "start": 695,
                            "end": 710,
                            "object": {
                              "type": "Identifier",
                              "start": 695,
                              "end": 699,
                              "name": "Intl"
                            },
                            "property": {
                              "type": "Identifier",
                              "start": 700,
                              "end": 710,
                              "name": "ListFormat"
                            },
                            "computed": false,
                            "optional": false
                          },
                          "arguments": [
                            {
                              "type": "ArrayExpression",
                              "start": 711,
                              "end": 713,
                              "elements": []
                            },
                            {
                              "type": "ObjectExpression",
                              "start": 715,
                              "end": 732,
                              "properties": [
                                {
                                  "type": "Property",
                                  "start": 717,
                                  "end": 730,
                                  "method": false,
                                  "shorthand": true,
                                  "computed": false,
                                  "key": {
                                    "type": "Identifier",
                                    "start": 717,
                                    "end": 730,
                                    "name": "localeMatcher"
                                  },
                                  "kind": "init",
                                  "value": {
                                    "type": "Identifier",
                                    "start": 717,
                                    "end": 730,
                                    "name": "localeMatcher"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "TemplateLiteral",
                  "start": 740,
                  "end": 799,
                  "expressions": [
                    {
                      "type": "Identifier",
                      "start": 743,
                      "end": 756,
                      "name": "localeMatcher"
                    }
                  ],
                  "quasis": [
                    {
                      "type": "TemplateElement",
                      "start": 741,
                      "end": 741,
                      "value": {
                        "raw": "",
                        "cooked": ""
                      },
                      "tail": false
                    },
                    {
                      "type": "TemplateElement",
                      "start": 757,
                      "end": 798,
                      "value": {
                        "raw": " is an invalid localeMatcher option value",
                        "cooked": " is an invalid localeMatcher option value"
                      },
                      "tail": true
                    }
                  ]
                }
              ],
              "optional": false
            }
          }
        ]
      }
    }
  ],
  "sourceType": "script"
}