{
  "type": "Program",
  "start": 0,
  "end": 794,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 458,
      "end": 589,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 464,
          "end": 588,
          "id": {
            "type": "Identifier",
            "start": 464,
            "end": 478,
            "name": "invalidOptions"
          },
          "init": {
            "type": "ArrayExpression",
            "start": 481,
            "end": 588,
            "elements": [
              {
                "type": "Literal",
                "start": 485,
                "end": 489,
                "value": null
              },
              {
                "type": "Literal",
                "start": 493,
                "end": 494,
                "value": 1
              },
              {
                "type": "Literal",
                "start": 498,
                "end": 500,
                "value": ""
              },
              {
                "type": "Literal",
                "start": 504,
                "end": 512,
                "value": "Lookup"
              },
              {
                "type": "Literal",
                "start": 516,
                "end": 524,
                "value": "LOOKUP"
              },
              {
                "type": "Literal",
                "start": 528,
                "end": 538,
                "value": "lookup\u0000"
              },
              {
                "type": "Literal",
                "start": 542,
                "end": 552,
                "value": "Best fit"
              },
              {
                "type": "Literal",
                "start": 556,
                "end": 566,
                "value": "BEST FIT"
              },
              {
                "type": "Literal",
                "start": 570,
                "end": 585,
                "value": "bestÂ fit"
              }
            ]
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "ForOfStatement",
      "start": 591,
      "end": 793,
      "await": false,
      "left": {
        "type": "VariableDeclaration",
        "start": 596,
        "end": 615,
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 602,
            "end": 615,
            "id": {
              "type": "Identifier",
              "start": 602,
              "end": 615,
              "name": "localeMatcher"
            },
            "init": null
          }
        ],
        "kind": "const"
      },
      "right": {
        "type": "Identifier",
        "start": 619,
        "end": 633,
        "name": "invalidOptions"
      },
      "body": {
        "type": "BlockStatement",
        "start": 635,
        "end": 793,
        "body": [
          {
            "type": "ExpressionStatement",
            "start": 639,
            "end": 791,
            "expression": {
              "type": "CallExpression",
              "start": 639,
              "end": 790,
              "callee": {
                "type": "MemberExpression",
                "start": 639,
                "end": 652,
                "object": {
                  "type": "Identifier",
                  "start": 639,
                  "end": 645,
                  "name": "assert"
                },
                "property": {
                  "type": "Identifier",
                  "start": 646,
                  "end": 652,
                  "name": "throws"
                },
                "computed": false,
                "optional": false
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "start": 653,
                  "end": 663,
                  "name": "RangeError"
                },
                {
                  "type": "FunctionExpression",
                  "start": 665,
                  "end": 728,
                  "id": null,
                  "expression": false,
                  "generator": false,
                  "async": false,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "start": 676,
                    "end": 728,
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "start": 682,
                        "end": 724,
                        "expression": {
                          "type": "NewExpression",
                          "start": 682,
                          "end": 723,
                          "callee": {
                            "type": "MemberExpression",
                            "start": 686,
                            "end": 700,
                            "object": {
                              "type": "Identifier",
                              "start": 686,
                              "end": 690,
                              "name": "Intl"
                            },
                            "property": {
                              "type": "Identifier",
                              "start": 691,
                              "end": 700,
                              "name": "Segmenter"
                            },
                            "computed": false,
                            "optional": false
                          },
                          "arguments": [
                            {
                              "type": "ArrayExpression",
                              "start": 701,
                              "end": 703,
                              "elements": []
                            },
                            {
                              "type": "ObjectExpression",
                              "start": 705,
                              "end": 722,
                              "properties": [
                                {
                                  "type": "Property",
                                  "start": 707,
                                  "end": 720,
                                  "method": false,
                                  "shorthand": true,
                                  "computed": false,
                                  "key": {
                                    "type": "Identifier",
                                    "start": 707,
                                    "end": 720,
                                    "name": "localeMatcher"
                                  },
                                  "kind": "init",
                                  "value": {
                                    "type": "Identifier",
                                    "start": 707,
                                    "end": 720,
                                    "name": "localeMatcher"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "TemplateLiteral",
                  "start": 730,
                  "end": 789,
                  "expressions": [
                    {
                      "type": "Identifier",
                      "start": 733,
                      "end": 746,
                      "name": "localeMatcher"
                    }
                  ],
                  "quasis": [
                    {
                      "type": "TemplateElement",
                      "start": 731,
                      "end": 731,
                      "value": {
                        "raw": "",
                        "cooked": ""
                      },
                      "tail": false
                    },
                    {
                      "type": "TemplateElement",
                      "start": 747,
                      "end": 788,
                      "value": {
                        "raw": " is an invalid localeMatcher option value",
                        "cooked": " is an invalid localeMatcher option value"
                      },
                      "tail": true
                    }
                  ]
                }
              ],
              "optional": false
            }
          }
        ]
      }
    }
  ],
  "sourceType": "script"
}